// <auto-generated />
using System;
using Horta_Api.Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Horta_Api.Migrations
{
    [DbContext(typeof(ConnectionContext))]
    [Migration("20250720024422_create-user-verification-code-tb")]
    partial class createuserverificationcodetb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Horta.Domain.Model.MainController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("LightStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("PumpRelayStatus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserTokenId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserTokenId");

                    b.ToTable("main_controllers");
                });

            modelBuilder.Entity("Horta.Domain.Model.TemperatureSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MainControllerId")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MainControllerId");

                    b.ToTable("temperature_sensors");
                });

            modelBuilder.Entity("Horta.Domain.Model.User", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserLogId")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("UserLogId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Horta.Domain.Model.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("user_logs");
                });

            modelBuilder.Entity("Horta.Domain.Model.WaterLevelSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MainControllerId")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MainControllerId");

                    b.ToTable("water_level_sensors");
                });

            modelBuilder.Entity("Horta_Api.Domain.Model.LightSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MainControllerId")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MainControllerId");

                    b.ToTable("light_sensors");
                });

            modelBuilder.Entity("Horta.Domain.Model.MainController", b =>
                {
                    b.HasOne("Horta.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horta.Domain.Model.TemperatureSensor", b =>
                {
                    b.HasOne("Horta.Domain.Model.MainController", "MainController")
                        .WithMany()
                        .HasForeignKey("MainControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainController");
                });

            modelBuilder.Entity("Horta.Domain.Model.User", b =>
                {
                    b.HasOne("Horta.Domain.Model.UserLog", "UserLog")
                        .WithMany()
                        .HasForeignKey("UserLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLog");
                });

            modelBuilder.Entity("Horta.Domain.Model.WaterLevelSensor", b =>
                {
                    b.HasOne("Horta.Domain.Model.MainController", "MainController")
                        .WithMany()
                        .HasForeignKey("MainControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainController");
                });

            modelBuilder.Entity("Horta_Api.Domain.Model.LightSensor", b =>
                {
                    b.HasOne("Horta.Domain.Model.MainController", "MainController")
                        .WithMany()
                        .HasForeignKey("MainControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainController");
                });
#pragma warning restore 612, 618
        }
    }
}
